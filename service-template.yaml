nodes:
  master0:
    name: master0
    clustername: _
    status: _
    docker_image: registry.domain.es:5000/masterimage:0.1.0
    docker_opts: _
    port: 22
    check_ports: [22, 80, 443]
    tags:
      - yarn
      - master
    requirements:
      cpu: 1
      mem: 1024
      node: c14-1
      disks: [disk1, disk2]
    host: _
    id: _
    status: _
    disks:
      disk1:
        name: _
        type: ssd
        origin: _
        destination: /data/1
        mode: rw
    networks:
      eth0:
        networkname: admin
        device: eth0
        bridge: _
        address: _
        gateway: _
        netmask: _
      eth1:
        networkname: storage
        device: eth1
        bridge: _
        address: _
        gateway: _
        netmask: _
    services: 
      - yarn
      - snamenode
  master1:
    name: master1
    clustername: _
    status: _
    docker_image: registry.domain.es:5000/masterimage:0.1.0
    docker_opts: ""
    port: 22
    check_ports: [22, 1080]
    tags:
      - yarn
      - master
    cpu: 1
    mem: 1024
    host: _
    id: _
    status: _
    disks:
      disk1:
        name: _
        type: ssd
        origin: _
        destination: /data/1
        mode: rw
    networks:
      eth0:
        networkname: admin
        device: eth0
        bridge: _
        address: _
        gateway: _
        netmask: _
      eth1:
        networkname: storage
        device: eth1
        bridge: _
        address: _
        gateway: _
        netmask: _
    services: 
      - namenode
{% for n in range(0, opts['slaves.number']) %}
  slave{{ n }}:
    name: slave{{ n }}
    clustername: _
    status: _
    docker_image: registry.domain.es:5000/slaveimage:0.1.0
    docker_opts: ""
    port: 22
    check_ports: [22, 4444]
    tags:
      - datanode
      - slave
    cpu: 2
    mem: 4096
    host: _
    id: _
    status: _
    disks:
{% for k in range(0, opts['slaves.disks']) %}
      disk{{ k }}:
        name: _
        type: sata
        origin: _
        destination: /data/{{ k }}
        mode: rw
{% endfor %}
    networks:
      eth0:
        networkname: admin
        device: eth0
        bridge: _
        address: _
        gateway: _
        netmask: _
      eth1:
        networkname: storage
        device: eth1
        bridge: _
        address: _
        gateway: _
        netmask: _
    services: 
      - datanode
{% endfor %}
services:
  yarn:
    name: yarn
    status: _
    yarn.scheduler.minimum-allocation-vcores: 1
    nodes:
      - master0
  datanode:
    name: datanode
    status: _
    dfs.blocksize: {{ opts['dfs.blocksize'] }}
    nodes:
{% for n in range(0, opts['slaves.number']) %}
      - slave{{ n }}
{% endfor %}
